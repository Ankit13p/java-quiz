[{"E:\\SpringbootReact\\java-quiz\\src\\index.js":"1","E:\\SpringbootReact\\java-quiz\\src\\reportWebVitals.js":"2","E:\\SpringbootReact\\java-quiz\\src\\component\\QuestionItem.jsx":"3","E:\\SpringbootReact\\java-quiz\\src\\component\\Navigation.jsx":"4","E:\\SpringbootReact\\java-quiz\\src\\component\\Footer.jsx":"5","E:\\SpringbootReact\\java-quiz\\src\\api\\QuestionsService.js":"6","E:\\SpringbootReact\\java-quiz\\src\\App.js":"7","E:\\SpringbootReact\\java-quiz\\src\\component\\Question.jsx":"8","E:\\SpringbootReact\\java-quiz\\src\\component\\Welcome.jsx":"9","E:\\SpringbootReact\\java-quiz\\src\\component\\Error.jsx":"10","E:\\SpringbootReact\\java-quiz\\src\\component\\SpecificQuestion.jsx":"11","E:\\SpringbootReact\\java-quiz\\src\\component\\AddQuestion.jsx":"12","E:\\SpringbootReact\\java-quiz\\src\\component\\ThankYou.jsx":"13","E:\\SpringbootReact\\java-quiz\\src\\component\\Technology.jsx":"14"},{"size":500,"mtime":1607494167121,"results":"15","hashOfConfig":"16"},{"size":362,"mtime":499162500000,"results":"17","hashOfConfig":"16"},{"size":4909,"mtime":1608250877605,"results":"18","hashOfConfig":"16"},{"size":939,"mtime":1608250931509,"results":"19","hashOfConfig":"16"},{"size":401,"mtime":1608016442182,"results":"20","hashOfConfig":"16"},{"size":564,"mtime":1608339191315,"results":"21","hashOfConfig":"16"},{"size":1201,"mtime":1608246989710,"results":"22","hashOfConfig":"16"},{"size":4681,"mtime":1608358136452,"results":"23","hashOfConfig":"16"},{"size":1104,"mtime":1608358151896,"results":"24","hashOfConfig":"16"},{"size":215,"mtime":1607556498541,"results":"25","hashOfConfig":"16"},{"size":591,"mtime":1608246789738,"results":"26","hashOfConfig":"16"},{"size":7332,"mtime":1608251006249,"results":"27","hashOfConfig":"16"},{"size":658,"mtime":1608250906367,"results":"28","hashOfConfig":"16"},{"size":3112,"mtime":1608370223135,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"taqlpt",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"32"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"E:\\SpringbootReact\\java-quiz\\src\\index.js",[],["61","62"],"E:\\SpringbootReact\\java-quiz\\src\\reportWebVitals.js",[],"E:\\SpringbootReact\\java-quiz\\src\\component\\QuestionItem.jsx",[],["63","64"],"E:\\SpringbootReact\\java-quiz\\src\\component\\Navigation.jsx",[],"E:\\SpringbootReact\\java-quiz\\src\\component\\Footer.jsx",[],"E:\\SpringbootReact\\java-quiz\\src\\api\\QuestionsService.js",[],"E:\\SpringbootReact\\java-quiz\\src\\App.js",[],"E:\\SpringbootReact\\java-quiz\\src\\component\\Question.jsx",["65","66"],"import { Component } from 'react';\r\nimport QuestionItem from './QuestionItem'\r\nimport QuestionsService from '../api/QuestionsService'\r\nimport SpecificQuestion from './SpecificQuestion';\r\n\r\nclass Question extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            questions : [],\r\n            qID :1,\r\n            correctCount : 0,\r\n            trueId: []\r\n        }  \r\n        this.idIncrement = this.idIncrement.bind(this);\r\n        this.findQuestion = this.findQuestion.bind(this);\r\n        this.createNumbers = this.createNumbers.bind(this);\r\n        this.trueAns = this.trueAns.bind(this);\r\n        this.thankyou = this.thankyou.bind(this);\r\n    }\r\n    componentDidMount(){\r\n        if(this.state.qID === 1){\r\n            QuestionsService.retriveAllQuestions()\r\n            .then(\r\n                (response) => {\r\n                    this.setState({\r\n                    questions : response.data\r\n                })\r\n            })\r\n        } else {\r\n            QuestionsService.retriveQuestion(this.state.qID)\r\n            .then(\r\n                (response) => {\r\n                    this.setState({\r\n                    questions : response.data,\r\n                    \r\n                })\r\n            })\r\n        }\r\n    }\r\n    idIncrement(){\r\n        this.setState(\r\n            (prevState) => {\r\n            return {\r\n            qID : prevState.qID +1\r\n            }\r\n        })\r\n    }\r\n    findQuestion(by){\r\n        this.setState({\r\n            qID : by\r\n\r\n        })\r\n    }\r\n    trueAns(resultId){\r\n        this.setState(\r\n            (prevState) => {\r\n                const trueId = [...prevState.trueId ,resultId];\r\n            return {\r\n                correctCount : prevState.correctCount +1,\r\n                trueId \r\n            }\r\n        })\r\n    }\r\n    createNumbers(n){\r\n        let trueQue = this.state.trueId;\r\n        let questionNumber = [];\r\n        for(let i =1; i < n+1; i++){\r\n            {(trueQue.includes(i)) && questionNumber.push(<SpecificQuestion by={i} findQuestionMethod={this.findQuestion} isTrue={true}/>);}\r\n            {!(trueQue.includes(i)) && questionNumber.push(<SpecificQuestion by={i} findQuestionMethod={this.findQuestion} isTrue={false}/>);}\r\n        }\r\n        return questionNumber;\r\n    }\r\n    thankyou(){\r\n            this.props.history.push(`/thankyou`)\r\n    }\r\n    render(){\r\n        console.log(this.state.trueId);\r\n        let count =0;\r\n       const question =  this.state.questions.map(data => \r\n                            {   count++\r\n                                if(data.id === this.state.qID){\r\n                                    return <QuestionItem key={data.id} query={data} idIncrement={this.idIncrement} trueAns={this.trueAns}/>\r\n                                }else{\r\n                                    return null;\r\n                                }\r\n                            })\r\n        return(\r\n            <div className=\"\" >\r\n                { (this.state.qID < count+1) && \r\n                <>\r\n                    <div className=\".d-inline-block mt-5 mb-2 p-3\" style={{width:\"70%\"}} >\r\n                        {question}\r\n\r\n                    </div> \r\n                    <div className=\" float-left .d-inline-block mt-4 p-2\" style={{width:\"20%\"}}>\r\n                    <h4 className=\"container p-2 bg-light text-dark border border-primary\" style={{fontSize:\"1em\"}}>Result : <span className=\"text-success\">{this.state.correctCount}</span> / <span className=\"text-danger\">{count}</span></h4>\r\n                        <h4 className=\"container p-2 bg-info\" style={{fontSize:\"1em\"}}>Questions</h4>\r\n                        \r\n                        <div className=\"border border-primary .d-inline-block p-2\" >{this.createNumbers(count)}</div> \r\n                    </div> \r\n                </>}\r\n                { !(this.state.qID < count+1) && \r\n                <>\r\n                    <div className=\"centerText\">\r\n                        {/* {this.state.correctCount>(count/3) && <h1 className=\"text-success\">Congratulations you are passed!!! </h1>}\r\n                        {!this.state.correctCount<(count/3) && <h1 className=\"text-danger\">Ooops Sorry you are failed !!! </h1>} */}\r\n                        <h4 className=\"container text-info\">You got <span className=\"text-success\">{this.state.correctCount}\r\n                        </span> corrects out of <span className=\"text-danger\">{count}</span></h4>\r\n                    \r\n                        <button className=\"btn draw-border\" onClick={this.thankyou}>End</button>\r\n                    </div>\r\n                </>}\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Question;","E:\\SpringbootReact\\java-quiz\\src\\component\\Welcome.jsx",[],"E:\\SpringbootReact\\java-quiz\\src\\component\\Error.jsx",[],"E:\\SpringbootReact\\java-quiz\\src\\component\\SpecificQuestion.jsx",[],"E:\\SpringbootReact\\java-quiz\\src\\component\\AddQuestion.jsx",[],"E:\\SpringbootReact\\java-quiz\\src\\component\\ThankYou.jsx",[],"E:\\SpringbootReact\\java-quiz\\src\\component\\Technology.jsx",[],{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","replacedBy":"70"},{"ruleId":"67","replacedBy":"71"},{"ruleId":"69","replacedBy":"72"},{"ruleId":"73","severity":1,"message":"74","line":69,"column":13,"nodeType":"75","messageId":"76","endLine":69,"endColumn":141},{"ruleId":"73","severity":1,"message":"74","line":70,"column":13,"nodeType":"75","messageId":"76","endLine":70,"endColumn":143},"no-native-reassign",["77"],"no-negated-in-lhs",["78"],["77"],["78"],"no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","no-global-assign","no-unsafe-negation"]